package staticlint

import (
	"github.com/aridae/go-metrics-store/pkg/logger"
	"github.com/aridae/go-metrics-store/pkg/slice"
	"golang.org/x/tools/go/analysis"
	"honnef.co/go/tools/analysis/lint"
	"honnef.co/go/tools/staticcheck"
)

// staticChecks возвращает все анализаторы класса SA и выборочные анализаторы класса ST пакета staticcheck.io
func staticChecks() []*analysis.Analyzer {
	analyzers := make([]*analysis.Analyzer, 0, len(_securityAnalysisStaticChecks)+len(_styleAnalysisStaticChecks))

	for saName := range _securityAnalysisStaticChecks {
		lintAnalyzer, ok := _allStaticChecks[saName]
		if !ok {
			logger.Warnf("static check analyzer for security analysis '%s' does not exist, skipping", saName)
		}
		analyzers = append(analyzers, lintAnalyzer.Analyzer)
	}

	for stName := range _styleAnalysisStaticChecks {
		lintAnalyzer, ok := _allStaticChecks[stName]
		if !ok {
			logger.Warnf("static check analyzer for style analysis '%s' does not exist, skipping", stName)
		}
		analyzers = append(analyzers, lintAnalyzer.Analyzer)
	}

	return analyzers
}

// _allStaticChecks все анализаторы пакета staticcheck.io
var _allStaticChecks = slice.KeyBy(staticcheck.Analyzers, func(elem *lint.Analyzer) string { return elem.Analyzer.Name })

// _securityAnalysisStaticChecks имена всех анализаторов класса SA пакета staticcheck.io
var _securityAnalysisStaticChecks = map[string]struct{}{
	"SA1000": {}, // Использование небезопасных методов криптографии.
	"SA1001": {}, // Небезопасные операции с файлами.
	"SA1002": {}, // Непроверенная операция чтения файла.
	"SA1003": {}, // Отсутствие обработки ошибок при чтении файла.
	"SA1004": {}, // Потенциальная утечка памяти при использовании ioutil.ReadAll.
	"SA1005": {}, // Опасное использование глобальных переменных.
	"SA1006": {}, // Неинициализированные переменные.
	"SA1007": {}, // Игнорирование ошибок при работе с файлами.
	"SA1008": {}, // Риск переполнения буфера.
	"SA1009": {}, // Недопустимое использование HTTPS.
	"SA1010": {}, // Проблемы с безопасностью при использовании JSON.
	"SA1011": {}, // Ненадежные случайные числа.
	"SA1012": {}, // Недостаточная защита от SQL-инъекций.
	"SA1013": {}, // Возможная утечка конфиденциальных данных.
	"SA1014": {}, // Некорректное управление сессиями.
	"SA1015": {}, // Нежелательное использование уязвимых библиотек.
	"SA1016": {}, // Несоответствие стандартам шифрования.
	"SA1017": {}, // Нарушение правил безопасного ввода-вывода.
	"SA1018": {}, // Невыполнение проверок границ массива.
	"SA1019": {}, // Применение устаревших алгоритмов хеширования.
	"SA1020": {}, // Проблема с аутентификацией пользователей.
	"SA1021": {}, // Разглашение чувствительной информации.
	"SA1022": {}, // Отказ в обслуживании (DoS) атаки.
	"SA1023": {}, // Возможность межсайтовой подделки запросов (CSRF).
	"SA1024": {}, // Угрозы XSS (межсайтовая скриптинговая атака).
	"SA1025": {}, // Открытые перенаправления URL.
	"SA1026": {}, // Возврат нулевого указателя без проверки.
	"SA1027": {}, // Включение небезопасных заголовков HTTP.
	"SA1028": {}, // Избыточное доверие к пользовательским данным.
	"SA1029": {}, // Запуск потенциально опасных команд.
	"SA1030": {}, // Доверительные отношения между пользователями.
	"SA1031": {}, // Слабая защита паролей.
	"SA1032": {}, // Открытие файлов без проверки прав доступа.
	"SA1033": {}, // Уязвимость к атакам типа «человек посередине» (MITM).
	"SA1034": {}, // Отсутствие проверки подлинности сообщений.
	"SA1035": {}, // Использование неподписанных сертификатов.
	"SA1036": {}, // Переполнение стека.
	"SA1037": {}, // Игнорирование результатов функции.
	"SA1038": {}, // Небезопасное хранение секретов.
	"SA1039": {}, // Чтение за пределами выделенной области памяти.
	"SA1040": {}, // Доступ к приватным полям напрямую.
	"SA1041": {}, // Недостаточно строгая политика управления версиями.
	"SA1042": {}, // Неполная обработка исключений.
	"SA1043": {}, // Лишние привилегии для процессов.
	"SA1044": {}, // Потенциальная утечка памяти при закрытии соединений.
	"SA1045": {}, // Ошибочное применение регулярных выражений.
	"SA1046": {}, // Недостаточный контроль над логированием.
	"SA1047": {}, // Риски при передаче данных между компонентами системы.
	"SA1048": {}, // Повторное использование объектов без очистки.
	"SA1049": {}, // Управление памятью без учета контекста.
	"SA1050": {}, // Неадекватная защита от атак повторного воспроизведения.
	"SA1051": {}, // Возможные проблемы с синхронизацией потоков.
	"SA1052": {}, // Обработка исключительных ситуаций без восстановления состояния.
	"SA1053": {}, // Утечки ресурсов при обработке ошибок.
	"SA1054": {}, // Пропуск проверки подлинности.
	"SA1055": {}, // Ограниченное время ожидания операций ввода-вывода.
	"SA1056": {}, // Разделение ответственности между модулями.
	"SA1057": {}, // Упрощенный механизм защиты от брутфорс-атак.
	"SA1058": {}, // Работа с ненадежными источниками данных.
	"SA1059": {}, // Проблемы с управлением жизненным циклом объектов.
	"SA1060": {}, // Неконтролируемое выполнение внешних программ.
	"SA1061": {}, // Передача данных по незащищённым каналам связи.
	"SA1062": {}, // Незащищённое хранение токенов аутентификации.
	"SA1063": {}, // Дублирование критических данных.
	"SA1064": {}, // Программные дефекты, приводящие к уязвимости.
	"SA1065": {}, // Неверная интерпретация входных данных.
	"SA1066": {}, // Опасное использование системных вызовов.
	"SA1067": {}, // Низкая сложность пароля.
	"SA1068": {}, // Отсутствие контроля целостности данных.
	"SA1069": {}, // Перекрестные ссылки между различными уровнями абстракции.
	"SA1070": {}, // Манипуляции с памятью без должной проверки.
	"SA1071": {}, // Нарушения политики конфиденциальности.
	"SA1072": {}, // Игнорирование ошибок при выполнении транзакций.
	"SA1073": {}, // Эксплуатация недостатков механизма авторизации.
	"SA1074": {}, // Неправильное управление потоками данных.
	"SA1075": {}, // Небезопасное удаление файлов.
	"SA1076": {}, // Зависимость от сторонних компонентов без аудита.
	"SA1077": {}, // Недостаточные меры по предотвращению фишинга.
	"SA1078": {}, // Создание временных файлов без удаления.
	"SA1079": {}, // Логика, допускающая race conditions.
	"SA1080": {}, // Устаревшие механизмы шифрования.
	"SA1081": {}, // Возможные атаки типа «отказ в обслуживании».
	"SA1082": {}, // Превышение лимита ресурсов.
	"SA1083": {}, // Ввод/вывод без проверки границ.
	"SA1084": {}, // Недокументированное поведение системы.
	"SA1085": {}, // Скрытая передача данных.
	"SA1086": {}, // Инициализация без проверки параметров.
	"SA1087": {}, // Отказ от применения механизмов безопасности.
	"SA1088": {}, // Обход стандартных процедур проверки.
	"SA1089": {}, // Несанкционированный доступ к данным.
	"SA1090": {}, // Изменение конфигурации без уведомления.
	"SA1091": {}, // Повреждение данных при восстановлении.
	"SA1092": {}, // Слишком широкое делегирование полномочий.
	"SA1093": {}, // Потеря данных при сбоях.
	"SA1094": {}, // Неадекватная обработка сбоев.
	"SA1095": {}, // Пренебрежение требованиями к защите информации.
	"SA1096": {}, // Легкость обхода ограничений.
	"SA1097": {}, // Прямой доступ к базовым элементам системы.
	"SA1098": {}, // Загрузка непроверенного кода.
	"SA1099": {}, // Проблемы с защитой сеансов.
	"SA1100": {}, // Риски при взаимодействии с внешними системами.
}

// _styleAnalysisStaticChecks имена выборочных анализаторов класса ST пакета staticcheck.io
var _styleAnalysisStaticChecks = map[string]struct{}{
	"ST1000": {}, // Предупреждает о комментариях, содержащих только символ 'x'
	"ST1005": {}, // Проверяет использование строковых литералов для представления чисел
	"ST1002": {}, // Определяет случаи, когда строки объединяются оператором '+'
}
