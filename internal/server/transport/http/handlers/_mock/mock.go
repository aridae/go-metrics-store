// Code generated by MockGen. DO NOT EDIT.
// Source: ./../router.go
//
// Generated by this command:
//
//	mockgen -source ./../router.go -destination ./mock.go -package _mock
//

// Package _mock is a generated GoMock package.
package _mock

import (
	context "context"
	reflect "reflect"

	models "github.com/aridae/go-metrics-store/internal/server/models"
	gomock "go.uber.org/mock/gomock"
)

// Mockpingable is a mock of pingable interface.
type Mockpingable struct {
	ctrl     *gomock.Controller
	recorder *MockpingableMockRecorder
	isgomock struct{}
}

// MockpingableMockRecorder is the mock recorder for Mockpingable.
type MockpingableMockRecorder struct {
	mock *Mockpingable
}

// NewMockpingable creates a new mock instance.
func NewMockpingable(ctrl *gomock.Controller) *Mockpingable {
	mock := &Mockpingable{ctrl: ctrl}
	mock.recorder = &MockpingableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockpingable) EXPECT() *MockpingableMockRecorder {
	return m.recorder
}

// Ping mocks base method.
func (m *Mockpingable) Ping(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockpingableMockRecorder) Ping(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*Mockpingable)(nil).Ping), arg0)
}

// MockuseCasesController is a mock of useCasesController interface.
type MockuseCasesController struct {
	ctrl     *gomock.Controller
	recorder *MockuseCasesControllerMockRecorder
	isgomock struct{}
}

// MockuseCasesControllerMockRecorder is the mock recorder for MockuseCasesController.
type MockuseCasesControllerMockRecorder struct {
	mock *MockuseCasesController
}

// NewMockuseCasesController creates a new mock instance.
func NewMockuseCasesController(ctrl *gomock.Controller) *MockuseCasesController {
	mock := &MockuseCasesController{ctrl: ctrl}
	mock.recorder = &MockuseCasesControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockuseCasesController) EXPECT() *MockuseCasesControllerMockRecorder {
	return m.recorder
}

// GetAllMetrics mocks base method.
func (m *MockuseCasesController) GetAllMetrics(arg0 context.Context) ([]models.Metric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllMetrics", arg0)
	ret0, _ := ret[0].([]models.Metric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllMetrics indicates an expected call of GetAllMetrics.
func (mr *MockuseCasesControllerMockRecorder) GetAllMetrics(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllMetrics", reflect.TypeOf((*MockuseCasesController)(nil).GetAllMetrics), arg0)
}

// GetMetricByKey mocks base method.
func (m *MockuseCasesController) GetMetricByKey(arg0 context.Context, arg1 models.MetricKey) (*models.Metric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetricByKey", arg0, arg1)
	ret0, _ := ret[0].(*models.Metric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetricByKey indicates an expected call of GetMetricByKey.
func (mr *MockuseCasesControllerMockRecorder) GetMetricByKey(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetricByKey", reflect.TypeOf((*MockuseCasesController)(nil).GetMetricByKey), arg0, arg1)
}

// UpsertMetric mocks base method.
func (m *MockuseCasesController) UpsertMetric(arg0 context.Context, arg1 models.MetricUpsert) (models.Metric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertMetric", arg0, arg1)
	ret0, _ := ret[0].(models.Metric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertMetric indicates an expected call of UpsertMetric.
func (mr *MockuseCasesControllerMockRecorder) UpsertMetric(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertMetric", reflect.TypeOf((*MockuseCasesController)(nil).UpsertMetric), arg0, arg1)
}

// UpsertMetricsBatch mocks base method.
func (m *MockuseCasesController) UpsertMetricsBatch(arg0 context.Context, arg1 []models.MetricUpsert) ([]models.Metric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertMetricsBatch", arg0, arg1)
	ret0, _ := ret[0].([]models.Metric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertMetricsBatch indicates an expected call of UpsertMetricsBatch.
func (mr *MockuseCasesControllerMockRecorder) UpsertMetricsBatch(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertMetricsBatch", reflect.TypeOf((*MockuseCasesController)(nil).UpsertMetricsBatch), arg0, arg1)
}
