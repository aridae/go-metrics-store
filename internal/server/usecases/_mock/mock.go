// Code generated by MockGen. DO NOT EDIT.
// Source: ./../controller.go
//
// Generated by this command:
//
//	mockgen -source ./../controller.go -destination ./mock.go -package _mock
//

// Package _mock is a generated GoMock package.
package _mock

import (
	context "context"
	reflect "reflect"

	models "github.com/aridae/go-metrics-store/internal/server/models"
	gomock "go.uber.org/mock/gomock"
)

// MocktransactionManager is a mock of transactionManager interface.
type MocktransactionManager struct {
	ctrl     *gomock.Controller
	recorder *MocktransactionManagerMockRecorder
	isgomock struct{}
}

// MocktransactionManagerMockRecorder is the mock recorder for MocktransactionManager.
type MocktransactionManagerMockRecorder struct {
	mock *MocktransactionManager
}

// NewMocktransactionManager creates a new mock instance.
func NewMocktransactionManager(ctrl *gomock.Controller) *MocktransactionManager {
	mock := &MocktransactionManager{ctrl: ctrl}
	mock.recorder = &MocktransactionManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocktransactionManager) EXPECT() *MocktransactionManagerMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MocktransactionManager) Do(ctx context.Context, fn func(context.Context) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", ctx, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// Do indicates an expected call of Do.
func (mr *MocktransactionManagerMockRecorder) Do(ctx, fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MocktransactionManager)(nil).Do), ctx, fn)
}

// MockmetricsRepo is a mock of metricsRepo interface.
type MockmetricsRepo struct {
	ctrl     *gomock.Controller
	recorder *MockmetricsRepoMockRecorder
	isgomock struct{}
}

// MockmetricsRepoMockRecorder is the mock recorder for MockmetricsRepo.
type MockmetricsRepoMockRecorder struct {
	mock *MockmetricsRepo
}

// NewMockmetricsRepo creates a new mock instance.
func NewMockmetricsRepo(ctrl *gomock.Controller) *MockmetricsRepo {
	mock := &MockmetricsRepo{ctrl: ctrl}
	mock.recorder = &MockmetricsRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockmetricsRepo) EXPECT() *MockmetricsRepoMockRecorder {
	return m.recorder
}

// GetAll mocks base method.
func (m *MockmetricsRepo) GetAll(ctx context.Context) ([]models.Metric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]models.Metric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockmetricsRepoMockRecorder) GetAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockmetricsRepo)(nil).GetAll), ctx)
}

// GetByKey mocks base method.
func (m *MockmetricsRepo) GetByKey(ctx context.Context, key models.MetricKey) (*models.Metric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByKey", ctx, key)
	ret0, _ := ret[0].(*models.Metric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByKey indicates an expected call of GetByKey.
func (mr *MockmetricsRepoMockRecorder) GetByKey(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByKey", reflect.TypeOf((*MockmetricsRepo)(nil).GetByKey), ctx, key)
}

// Save mocks base method.
func (m *MockmetricsRepo) Save(ctx context.Context, metric models.Metric) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, metric)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockmetricsRepoMockRecorder) Save(ctx, metric any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockmetricsRepo)(nil).Save), ctx, metric)
}
