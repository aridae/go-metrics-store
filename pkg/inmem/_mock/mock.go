// Code generated by MockGen. DO NOT EDIT.
// Source: ./../storage.go
//
// Generated by this command:
//
//	mockgen -source ./../storage.go -destination ./mock.go -package _mock
//

// Package _mock is a generated GoMock package.
package _mock

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// Mockencoder is a mock of encoder interface.
type Mockencoder struct {
	ctrl     *gomock.Controller
	recorder *MockencoderMockRecorder
	isgomock struct{}
}

// MockencoderMockRecorder is the mock recorder for Mockencoder.
type MockencoderMockRecorder struct {
	mock *Mockencoder
}

// NewMockencoder creates a new mock instance.
func NewMockencoder(ctrl *gomock.Controller) *Mockencoder {
	mock := &Mockencoder{ctrl: ctrl}
	mock.recorder = &MockencoderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockencoder) EXPECT() *MockencoderMockRecorder {
	return m.recorder
}

// Encode mocks base method.
func (m *Mockencoder) Encode(e any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encode", e)
	ret0, _ := ret[0].(error)
	return ret0
}

// Encode indicates an expected call of Encode.
func (mr *MockencoderMockRecorder) Encode(e any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encode", reflect.TypeOf((*Mockencoder)(nil).Encode), e)
}

// Mockdecoder is a mock of decoder interface.
type Mockdecoder struct {
	ctrl     *gomock.Controller
	recorder *MockdecoderMockRecorder
	isgomock struct{}
}

// MockdecoderMockRecorder is the mock recorder for Mockdecoder.
type MockdecoderMockRecorder struct {
	mock *Mockdecoder
}

// NewMockdecoder creates a new mock instance.
func NewMockdecoder(ctrl *gomock.Controller) *Mockdecoder {
	mock := &Mockdecoder{ctrl: ctrl}
	mock.recorder = &MockdecoderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockdecoder) EXPECT() *MockdecoderMockRecorder {
	return m.recorder
}

// Decode mocks base method.
func (m *Mockdecoder) Decode(e any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decode", e)
	ret0, _ := ret[0].(error)
	return ret0
}

// Decode indicates an expected call of Decode.
func (mr *MockdecoderMockRecorder) Decode(e any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decode", reflect.TypeOf((*Mockdecoder)(nil).Decode), e)
}

// Mockfile is a mock of file interface.
type Mockfile struct {
	ctrl     *gomock.Controller
	recorder *MockfileMockRecorder
	isgomock struct{}
}

// MockfileMockRecorder is the mock recorder for Mockfile.
type MockfileMockRecorder struct {
	mock *Mockfile
}

// NewMockfile creates a new mock instance.
func NewMockfile(ctrl *gomock.Controller) *Mockfile {
	mock := &Mockfile{ctrl: ctrl}
	mock.recorder = &MockfileMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockfile) EXPECT() *MockfileMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *Mockfile) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockfileMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*Mockfile)(nil).Close))
}

// Read mocks base method.
func (m *Mockfile) Read(p []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockfileMockRecorder) Read(p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*Mockfile)(nil).Read), p)
}

// Seek mocks base method.
func (m *Mockfile) Seek(offset int64, whence int) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Seek", offset, whence)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Seek indicates an expected call of Seek.
func (mr *MockfileMockRecorder) Seek(offset, whence any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Seek", reflect.TypeOf((*Mockfile)(nil).Seek), offset, whence)
}

// Truncate mocks base method.
func (m *Mockfile) Truncate(size int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Truncate", size)
	ret0, _ := ret[0].(error)
	return ret0
}

// Truncate indicates an expected call of Truncate.
func (mr *MockfileMockRecorder) Truncate(size any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Truncate", reflect.TypeOf((*Mockfile)(nil).Truncate), size)
}

// Write mocks base method.
func (m *Mockfile) Write(p []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockfileMockRecorder) Write(p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*Mockfile)(nil).Write), p)
}
