// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.0
// source: metrics_store.proto

package metricsstore

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MetricsStoreAPI_GetMetric_FullMethodName          = "/metrics_store.MetricsStoreAPI/GetMetric"
	MetricsStoreAPI_GetAllMetricsList_FullMethodName  = "/metrics_store.MetricsStoreAPI/GetAllMetricsList"
	MetricsStoreAPI_UpsertMetric_FullMethodName       = "/metrics_store.MetricsStoreAPI/UpsertMetric"
	MetricsStoreAPI_UpsertMetricsBatch_FullMethodName = "/metrics_store.MetricsStoreAPI/UpsertMetricsBatch"
)

// MetricsStoreAPIClient is the client API for MetricsStoreAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetricsStoreAPIClient interface {
	GetMetric(ctx context.Context, in *GetMetricRequest, opts ...grpc.CallOption) (*GetMetricResponse, error)
	GetAllMetricsList(ctx context.Context, in *GetAllMetricsListRequest, opts ...grpc.CallOption) (*GetAllMetricsListResponse, error)
	UpsertMetric(ctx context.Context, in *UpsertMetricRequest, opts ...grpc.CallOption) (*UpsertMetricResponse, error)
	UpsertMetricsBatch(ctx context.Context, in *UpsertMetricsBatchRequest, opts ...grpc.CallOption) (*UpsertMetricsBatchResponse, error)
}

type metricsStoreAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewMetricsStoreAPIClient(cc grpc.ClientConnInterface) MetricsStoreAPIClient {
	return &metricsStoreAPIClient{cc}
}

func (c *metricsStoreAPIClient) GetMetric(ctx context.Context, in *GetMetricRequest, opts ...grpc.CallOption) (*GetMetricResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMetricResponse)
	err := c.cc.Invoke(ctx, MetricsStoreAPI_GetMetric_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricsStoreAPIClient) GetAllMetricsList(ctx context.Context, in *GetAllMetricsListRequest, opts ...grpc.CallOption) (*GetAllMetricsListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllMetricsListResponse)
	err := c.cc.Invoke(ctx, MetricsStoreAPI_GetAllMetricsList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricsStoreAPIClient) UpsertMetric(ctx context.Context, in *UpsertMetricRequest, opts ...grpc.CallOption) (*UpsertMetricResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpsertMetricResponse)
	err := c.cc.Invoke(ctx, MetricsStoreAPI_UpsertMetric_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricsStoreAPIClient) UpsertMetricsBatch(ctx context.Context, in *UpsertMetricsBatchRequest, opts ...grpc.CallOption) (*UpsertMetricsBatchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpsertMetricsBatchResponse)
	err := c.cc.Invoke(ctx, MetricsStoreAPI_UpsertMetricsBatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetricsStoreAPIServer is the server API for MetricsStoreAPI service.
// All implementations must embed UnimplementedMetricsStoreAPIServer
// for forward compatibility.
type MetricsStoreAPIServer interface {
	GetMetric(context.Context, *GetMetricRequest) (*GetMetricResponse, error)
	GetAllMetricsList(context.Context, *GetAllMetricsListRequest) (*GetAllMetricsListResponse, error)
	UpsertMetric(context.Context, *UpsertMetricRequest) (*UpsertMetricResponse, error)
	UpsertMetricsBatch(context.Context, *UpsertMetricsBatchRequest) (*UpsertMetricsBatchResponse, error)
	mustEmbedUnimplementedMetricsStoreAPIServer()
}

// UnimplementedMetricsStoreAPIServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMetricsStoreAPIServer struct{}

func (UnimplementedMetricsStoreAPIServer) GetMetric(context.Context, *GetMetricRequest) (*GetMetricResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetric not implemented")
}
func (UnimplementedMetricsStoreAPIServer) GetAllMetricsList(context.Context, *GetAllMetricsListRequest) (*GetAllMetricsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllMetricsList not implemented")
}
func (UnimplementedMetricsStoreAPIServer) UpsertMetric(context.Context, *UpsertMetricRequest) (*UpsertMetricResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertMetric not implemented")
}
func (UnimplementedMetricsStoreAPIServer) UpsertMetricsBatch(context.Context, *UpsertMetricsBatchRequest) (*UpsertMetricsBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertMetricsBatch not implemented")
}
func (UnimplementedMetricsStoreAPIServer) mustEmbedUnimplementedMetricsStoreAPIServer() {}
func (UnimplementedMetricsStoreAPIServer) testEmbeddedByValue()                         {}

// UnsafeMetricsStoreAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetricsStoreAPIServer will
// result in compilation errors.
type UnsafeMetricsStoreAPIServer interface {
	mustEmbedUnimplementedMetricsStoreAPIServer()
}

func RegisterMetricsStoreAPIServer(s grpc.ServiceRegistrar, srv MetricsStoreAPIServer) {
	// If the following call pancis, it indicates UnimplementedMetricsStoreAPIServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MetricsStoreAPI_ServiceDesc, srv)
}

func _MetricsStoreAPI_GetMetric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetricRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsStoreAPIServer).GetMetric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricsStoreAPI_GetMetric_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsStoreAPIServer).GetMetric(ctx, req.(*GetMetricRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricsStoreAPI_GetAllMetricsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllMetricsListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsStoreAPIServer).GetAllMetricsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricsStoreAPI_GetAllMetricsList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsStoreAPIServer).GetAllMetricsList(ctx, req.(*GetAllMetricsListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricsStoreAPI_UpsertMetric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertMetricRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsStoreAPIServer).UpsertMetric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricsStoreAPI_UpsertMetric_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsStoreAPIServer).UpsertMetric(ctx, req.(*UpsertMetricRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricsStoreAPI_UpsertMetricsBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertMetricsBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsStoreAPIServer).UpsertMetricsBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricsStoreAPI_UpsertMetricsBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsStoreAPIServer).UpsertMetricsBatch(ctx, req.(*UpsertMetricsBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MetricsStoreAPI_ServiceDesc is the grpc.ServiceDesc for MetricsStoreAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetricsStoreAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "metrics_store.MetricsStoreAPI",
	HandlerType: (*MetricsStoreAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMetric",
			Handler:    _MetricsStoreAPI_GetMetric_Handler,
		},
		{
			MethodName: "GetAllMetricsList",
			Handler:    _MetricsStoreAPI_GetAllMetricsList_Handler,
		},
		{
			MethodName: "UpsertMetric",
			Handler:    _MetricsStoreAPI_UpsertMetric_Handler,
		},
		{
			MethodName: "UpsertMetricsBatch",
			Handler:    _MetricsStoreAPI_UpsertMetricsBatch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "metrics_store.proto",
}
